# Docify: Automated Documentation Generator

## Project Overview

Docify is a backend application that automatically generates documentation for GitHub repositories.  It leverages a large language model (LLM) to analyze the repository's code, README, and other files to produce a comprehensive documentation set.  The generated documentation includes sections such as Project Overview, Installation, Tech Stack, Feature List, Code Architecture, Usage Examples, and API/Function explanations. The application uses a Node.js/Express backend and interacts with the Google Gemini API for content generation.


## Installation/Setup

1. **Clone the repository:**
   ```bash
   git clone <repository_url>
   ```

2. **Install dependencies:**
   ```bash
   cd docify
   npm install
   ```

3. **Set up environment variables:** Create a `.env` file in the root directory and add your Google Gemini API key:
   ```
   GEMINI_API_KEY=<your_api_key>
   ```

4. **Start the server:**
   ```bash
   npm start
   ```
   This will start the server on port 5000 (or the port specified in your environment variables).


## Tech Stack

* **Backend:** Node.js, Express.js
* **Database:** None (data is processed and stored temporarily in memory)
* **LLM:** Google Gemini Pro
* **Utilities:** `cors`, `express`, `path`, `url`, `dotenv`
* **Git Interaction:**  Custom functions (`cloneRepo`, `cleanUp`) likely utilizing a library like `nodegit`.


## Feature List

* **GitHub Repository Analysis:** Accepts a GitHub repository URL as input.
* **Code Parsing:** Extracts relevant information from the repository's code and README file.
* **AI-Powered Documentation Generation:** Uses the Google Gemini Pro LLM to generate documentation.
* **Multiple Export Formats:** Supports generating documentation in various formats (currently, at least Markdown is implied).
* **API Endpoint for Documentation Generation:** Provides a REST API endpoint to trigger the documentation generation process.
* **API Endpoint for Downloading Generated Documentation:** Provides a REST API to download the generated documentation.


## Code Architecture

The application follows a layered architecture:

1. **Routes (`docifyRoutes.js`):** Defines the API endpoints for `/generate` (POST request to trigger documentation generation) and `/download` (GET request to download the generated documentation).
2. **Controller (`docifyController.js`):** Handles requests, orchestrates the documentation generation process, and interacts with the utility functions.
3. **Utils:**
    * **`gitUtils.js`:** Contains functions for cloning the GitHub repository (`cloneRepo`) and cleaning up temporary files (`cleanUp`).
    * **`parseUtils.js`:** Contains functions for parsing the repository's code and README file (`parseRepo`).
    * **`aiUtils.js`:** Contains functions for interacting with the Google Gemini API (`generateAIContent`).
    * **`exportUtils.js`:** Contains functions for exporting the documentation in various formats (`exportDocs`).
4. **Server (`server.js`):** Starts the Express.js server.
5. **Main Application (`app.js`):** Sets up middleware (cors, json parsing), defines API routes, and handles static file serving for downloads.


## Usage Examples

**Generate Documentation:**

Send a POST request to `/api/docify/generate` with the following JSON payload:

```json
{
  "repoUrl": "https://github.com/<username>/<repository>",
  "exportFormat": "md" // optional, defaults to 'md'
}
```

**Download Documentation:**

Once the documentation is generated, send a GET request to `/api/docify/download/{filename}` where `{filename}` is the name of the generated documentation file (provided in the response from the `/generate` endpoint).


## APIs or Functions Explained

* **`generateDocumentation(req, res)`:**  The main controller function that handles the documentation generation process. It receives the repository URL and export format, clones the repo, parses the code and README, calls the LLM, exports the documentation, and sends the download URL in the response.

* **`downloadFile(req, res)`:** Handles the download requests. Sends the generated documentation file to the client.

* **`generateAIContent({readme, files})`:**  This function in `aiUtils.js` interacts with the Google Gemini API. It constructs a prompt containing the README and code snippets and sends it to the Gemini Pro model.  The response (generated documentation) is then returned.

* **`cloneRepo(repoUrl, repoName)`:**  (In `gitUtils.js`) Clones the specified GitHub repository to a local directory.

* **`cleanUp(localPath)`:** (In `gitUtils.js`) Removes the locally cloned repository.

* **`parseRepo(localPath)`:** (In `parseUtils.js`) Parses the repository's files, extracting relevant information like the README content and code snippets.  The exact parsing logic isn't shown but is crucial to the application's function.

* **`exportDocs(aiResponse, exportFormat)`:** (In `exportUtils.js`) Takes the LLM's response and exports it to the specified format (e.g., Markdown).


This documentation provides a comprehensive overview of the Docify application.  Further details could be added by examining the implementation of the utility functions (`parseUtils`, `gitUtils`, `exportUtils`) which are not fully shown in the provided code snippets.
